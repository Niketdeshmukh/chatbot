[{"C:\\Users\\niket\\New folder\\chatbot\\frontend\\src\\index.js":"1","C:\\Users\\niket\\New folder\\chatbot\\frontend\\src\\App.js":"2","C:\\Users\\niket\\New folder\\chatbot\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\niket\\New folder\\chatbot\\frontend\\src\\Components\\Chatbot.js":"4"},{"size":500,"mtime":1622452509000,"results":"5","hashOfConfig":"6"},{"size":176,"mtime":1628148361000,"results":"7","hashOfConfig":"6"},{"size":366,"mtime":1628148143000,"results":"8","hashOfConfig":"6"},{"size":14492,"mtime":1651166093284,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"zoankj",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"C:\\Users\\niket\\New folder\\chatbot\\frontend\\src\\index.js",[],"C:\\Users\\niket\\New folder\\chatbot\\frontend\\src\\App.js",[],"C:\\Users\\niket\\New folder\\chatbot\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\niket\\New folder\\chatbot\\frontend\\src\\Components\\Chatbot.js",["19","20","21","22","23","24","25","26","27","28","29"],"import React, { useState, useCallback } from \"react\";\nimport chatbotImg from \"../images/chatbot.png\";\nimport userimage from \"../images/dp.png\";\nimport axios from \"axios\";\nimport { format } from \"date-fns\";\nimport { useDropzone } from \"react-dropzone\";\nimport happy from \"../images/happy.png\";\nimport sad from \"../images/sad.png\";\n\nfunction Chatbot() {\n  const [chatbot, setChatbot] = useState(false);\n  const [botMessages, setBotMessages] = useState([]);\n  const [location, setLocation] = useState();\n  const [personMessages, setPersonMessages] = useState([]);\n  const [files, setFiles] = useState([]);\n  const [data, setData] = useState([]);\n  const [showFileModal, setFileModal] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState();\n  const [response, setResponse] = useState([]);\n  const feedback = (response, index) => {\n    setResponse((oldArray) => [...oldArray, { response, index }]);\n  };\n  var messages = [];\n  Array.prototype.unique = function () {\n    var a = this.concat();\n    for (var i = 0; i < a.length; ++i) {\n      for (var j = i + 1; j < a.length; ++j) {\n        if (a[i] === a[j]) a.splice(j--, 1);\n      }\n    }\n\n    return a;\n  };\n  messages = botMessages.concat(personMessages).unique();\n  console.log(messages);\n  const onDrop = useCallback((acceptedFiles) => {\n    acceptedFiles.forEach((file) => {\n      setFiles((oldArray) => [...oldArray, file]);\n    });\n  }, []);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\n  const setShowFileModal = (param) => {\n    setFileModal(param);\n    setFiles([]);\n    setUploadProgress();\n  };\n  const removeFile = (filePath) => {\n    setFiles(files.filter((item) => item.path !== filePath));\n  };\n  const FileUploader = async (file, index, size) => {\n    var response;\n    console.log(index, size);\n    if (file) {\n      const formData = new FormData();\n      formData.append(\"file\", file, file.name);\n      response = await axios.post(\n        `http://localhost:8000/api/v1/upload/singleFile`,\n        formData,\n        {\n          onUploadProgress: (ProgressEvent) => {\n            setUploadProgress(\n              Math.round(\n                (ProgressEvent.loaded / ProgressEvent.total) *\n                  100 *\n                  (index / size)\n              )\n            );\n          },\n        }\n      );\n    }\n    return response;\n  };\n\n  const uploadFiles = async () => {\n    for (var i = 0; i < files.length; i++) {\n      const response = await FileUploader(files[i], i + 1, files.length);\n      if (response.data) {\n        setData((oldArray) => [...oldArray, response.data]);\n      }\n    }\n  };\n\n  const toggleChatbot = () => {\n    setChatbot(!chatbot);\n  };\n  const chatBody = document.getElementById(\"chatBody\");\n  const scrollToBottom = () => {\n    chatBody.scrollTop = chatBody.scrollHeight;\n  };\n\n  const handleSend = async (e) => {\n    e.preventDefault();\n    const message = document.getElementById(\"message\").value;\n    if (message && message.trim().length > 0) {\n      setPersonMessages([\n        ...messages,\n        { author: \"person\", message: message, time: Date.now() },\n      ]);\n      scrollToBottom();\n      document.getElementById(\"message\").value = \"\";\n\n      const result = await axios.get(\n        \"https://api.github.com/users/hacktivist123/repos\"\n      );\n      const botMsg = result.data.filter(\n        (data) => data.id == message || data.node_id == message\n      );\n      setBotMessages([\n        ...messages,\n        {\n          author: \"bot\",\n          message: botMsg.length ? botMsg[0].full_name : \"No match found\",\n          time: Date.now(),\n        },\n      ]);\n      setLocation(botMsg.length ? botMsg[0].name : \"\");\n    }\n    scrollToBottom();\n  };\n  return (\n    <>\n      <a className=\"chat-button\" onClick={toggleChatbot}>\n        <div className=\"msg\">{chatbot ? \"Close\" : \"Open\"} Chatbot</div>\n      </a>\n      <div\n        className=\"chatbot\"\n        style={chatbot ? { display: \"block\" } : { display: \"none\" }}\n      >\n        <div\n          className=\"file-upload-modal\"\n          id=\"file-modal-body\"\n          hidden={showFileModal ? \"\" : \"hidden\"}\n        >\n          <div className=\"file-modal-box\">\n            <div className=\"modal-box-header\">\n              Upload File\n              <div\n                className=\"modal-close\"\n                onClick={() => {\n                  setShowFileModal(false);\n                }}\n              >\n                <svg\n                  xmlns=\"http://www.w3.org/2000/svg\"\n                  height=\"24px\"\n                  viewBox=\"0 0 24 24\"\n                  width=\"24px\"\n                  fill=\"#000000\"\n                >\n                  <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n                  <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z\" />\n                </svg>\n              </div>\n            </div>\n            <div className=\"modal-body\">\n              {uploadProgress === 100 ? (\n                <h3>\n                  The {files.length > 1 ? \"files\" : \"file\"} has been uploaded\n                </h3>\n              ) : (\n                <>\n                  <div className=\"upload-here\" {...getRootProps()}>\n                    {!files.length ? (\n                      <>\n                        <h1>Drag the file here</h1>\n                        <div className=\"or-center\">OR</div>\n                        <div className=\"file-input\">\n                          click to select file\n                          <input\n                            {...getInputProps()}\n                            type=\"file\"\n                            accept=\".pdf\"\n                          />\n                        </div>\n                      </>\n                    ) : (\n                      <>\n                        <div className=\"or-center\">\n                          {files.length} file selected\n                        </div>\n                        <ul className=\"fileList\">\n                          {files.map((file) => {\n                            return (\n                              <li key={file.path}>\n                                {file.path} - {file.size / 1000}kb\n                                <span onClick={() => removeFile(file.path)}>\n                                  <svg\n                                    xmlns=\"http://www.w3.org/2000/svg\"\n                                    height=\"24px\"\n                                    viewBox=\"0 0 24 24\"\n                                    width=\"24px\"\n                                    fill=\"#777\"\n                                  >\n                                    <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n                                    <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z\" />\n                                  </svg>\n                                </span>\n                              </li>\n                            );\n                          })}\n                        </ul>\n                      </>\n                    )}\n                  </div>\n                  <div\n                    className=\"uploadProgress\"\n                    hidden={\n                      uploadProgress === \"\" || !uploadProgress ? \"hidden\" : \"\"\n                    }\n                  >\n                    <div\n                      className=\"uploadStatus\"\n                      style={{ width: uploadProgress + \"%\" }}\n                    >\n                      {uploadProgress}%\n                    </div>\n                  </div>\n                  <button\n                    disabled={files.length ? false : true}\n                    className=\"upload-button\"\n                    onClick={(e) => {\n                      uploadFiles(e);\n                    }}\n                  >\n                    Upload file\n                  </button>\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n        <header></header>\n        <div className=\"flex\">\n          <div className=\"chatbox\">\n            <div className=\"chat-header\">Book Chatbot</div>\n            <div className=\"chat-body\" id=\"chatBody\">\n              <div className=\"message-body\">\n                <img src={chatbotImg} height=\"35px\" width=\"35px\" />\n                <div className=\"text\">\n                  <div className=\"info\">\n                    Bot {format(new Date(Date.now()), \"kk:mm aaaaa'm'\")}\n                  </div>\n                  <div className=\"message\">\n                    Hello there, how can I help you?\n                  </div>\n                </div>\n              </div>\n\n              {messages\n                .sort((a, b) => (a.time > b.time ? 1 : -1))\n                .map((message, index) => (\n                  <span key={index}>\n                    {message.author === \"person\" ? (\n                      <div\n                        style={{\n                          float: \"right\",\n                          marginRight: \"10px\",\n                          display: \"block\",\n                          width: \"100%\",\n                        }}\n                      >\n                        <div className=\"user-message\" key={index}>\n                          <div className=\"msg-container\">\n                            <div\n                              style={{\n                                display: \"flex\",\n                                width: \"max-content\",\n                                float: \"right\",\n                              }}\n                            >\n                              <div className=\"text\">\n                                <div\n                                  className=\"info\"\n                                  style={{ textAlign: \"right\" }}\n                                >\n                                  User{\" \"}\n                                  {format(\n                                    new Date(message.time),\n                                    \"kk:mm aaaaa'm'\"\n                                  )}\n                                </div>\n                                <div className=\"message\">{message.message}</div>\n                              </div>\n                              <img\n                                style={{ marginLeft: \"10px\" }}\n                                src={userimage}\n                                height=\"35px\"\n                                width=\"35px\"\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ) : (\n                      <div style={{ width: \"100%\" }}>\n                        <div className=\"message-body\" style={{ width: \"100%\" }}>\n                          <img src={chatbotImg} height=\"35px\" width=\"35px\" />\n                          <div className=\"text\">\n                            <div className=\"info\">\n                              Bot{\" \"}\n                              {format(new Date(message.time), \"kk:mm aaaaa'm'\")}\n                            </div>\n                            <div className=\"message\">{message.message}</div>\n                          </div>\n                        </div>\n                        {response.some((e) => e.index === index) ? (\n                          <div className=\"feedback\">\n                            Your feedback has been recorded.\n                          </div>\n                        ) : (\n                          <div className=\"feedback\">\n                            Are you happy with the response?\n                            <div className=\"feedback-body\">\n                              <div\n                                className=\"fc\"\n                                onClick={() => feedback(1, index)}\n                              >\n                                <img src={happy} class=\"emoji\" />\n                                <div>Yes</div>\n                              </div>\n                              <div\n                                className=\"fc\"\n                                onClick={() => feedback(0, index)}\n                              >\n                                <img src={sad} class=\"emoji\" />\n                                <div>No</div>\n                              </div>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  </span>\n                ))}\n              <div\n                style={{ float: \"right\", width: \"100%\", marginTop: \"100px\" }}\n                id=\"bottom\"\n              ></div>\n            </div>\n\n            <div className=\"chat-footer\">\n              <form onSubmit={handleSend} method=\"post\">\n                <button\n                  className=\"fileLabel\"\n                  type=\"button\"\n                  onClick={() => setShowFileModal(true)}\n                >\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    enableBackground=\"new 0 0 24 24\"\n                    height=\"24px\"\n                    viewBox=\"0 0 24 24\"\n                    width=\"24px\"\n                    fill=\"#1967d2\"\n                  >\n                    <g>\n                      <rect fill=\"none\" height=\"24\" width=\"24\" />\n                    </g>\n                    <g>\n                      <g>\n                        <path d=\"M14,2H6C4.9,2,4.01,2.9,4.01,4L4,20c0,1.1,0.89,2,1.99,2H18c1.1,0,2-0.9,2-2V8L14,2z M18,20H6V4h7v5h5V20z M8,15.01 l1.41,1.41L11,14.84V19h2v-4.16l1.59,1.59L16,15.01L12.01,11L8,15.01z\" />\n                      </g>\n                    </g>\n                  </svg>\n                </button>\n                <input\n                  autoComplete=\"off\"\n                  id=\"message\"\n                  type=\"text\"\n                  className=\"input-message\"\n                  placeholder=\"Ask something here...\"\n                />\n                <button type=\"submit\">Send</button>\n              </form>\n            </div>\n          </div>\n          <div className=\"result\">\n            <div className=\"info\" style={{ fontSize: \"14px\" }}>\n              You can ask any question related to the book to the chatbot and it\n              will give you the suitable answers\n            </div>\n            <h1>Answer found in the paragraph</h1>\n            <h1>{location}</h1>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\nexport default Chatbot;\n",{"ruleId":"30","severity":1,"message":"31","line":16,"column":10,"nodeType":"32","messageId":"33","endLine":16,"endColumn":14},{"ruleId":"34","severity":1,"message":"35","line":24,"column":3,"nodeType":"36","messageId":"37","endLine":33,"endColumn":4},{"ruleId":"30","severity":1,"message":"38","line":41,"column":40,"nodeType":"32","messageId":"33","endLine":41,"endColumn":52},{"ruleId":"39","severity":1,"message":"40","line":107,"column":27,"nodeType":"41","messageId":"37","endLine":107,"endColumn":29},{"ruleId":"39","severity":1,"message":"40","line":107,"column":54,"nodeType":"41","messageId":"37","endLine":107,"endColumn":56},{"ruleId":"42","severity":1,"message":"43","line":123,"column":7,"nodeType":"44","endLine":123,"endColumn":58},{"ruleId":"45","severity":1,"message":"46","line":239,"column":17,"nodeType":"44","endLine":239,"endColumn":68},{"ruleId":"45","severity":1,"message":"46","line":285,"column":31,"nodeType":"44","endLine":290,"endColumn":33},{"ruleId":"45","severity":1,"message":"46","line":298,"column":27,"nodeType":"44","endLine":298,"endColumn":78},{"ruleId":"45","severity":1,"message":"46","line":319,"column":33,"nodeType":"44","endLine":319,"endColumn":66},{"ruleId":"45","severity":1,"message":"46","line":326,"column":33,"nodeType":"44","endLine":326,"endColumn":64},"no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","no-extend-native","Array prototype is read only, properties should not be added.","AssignmentExpression","unexpected","'isDragActive' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images."]